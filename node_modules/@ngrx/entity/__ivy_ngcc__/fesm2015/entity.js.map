{"version":3,"sources":["/home/max/angular/ngrx-data/node_modules/@ngrx/entity/fesm2015/entity.js"],"names":[],"mappings":"AAAA","file":"entity.js","sourcesContent":["/**\n * @license NgRx 8.0.1\n * (c) 2015-2018 Brandon Roberts, Mike Ryan, Rob Wormald, Victor Savkin\n * License: MIT\n */\nimport { createSelector } from '@ngrx/store';\nimport { isDevMode } from '@angular/core';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @template V\n * @return {?}\n */\nfunction getInitialEntityState() {\n    return {\n        ids: [],\n        entities: {},\n    };\n}\n/**\n * @template V\n * @return {?}\n */\nfunction createInitialStateFactory() {\n    /**\n     * @param {?=} additionalState\n     * @return {?}\n     */\n    function getInitialState(additionalState = {}) {\n        return Object.assign(getInitialEntityState(), additionalState);\n    }\n    return { getInitialState };\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @template T\n * @return {?}\n */\nfunction createSelectorsFactory() {\n    /**\n     * @param {?=} selectState\n     * @return {?}\n     */\n    function getSelectors(selectState) {\n        /** @type {?} */\n        const selectIds = (/**\n         * @param {?} state\n         * @return {?}\n         */\n        (state) => state.ids);\n        /** @type {?} */\n        const selectEntities = (/**\n         * @param {?} state\n         * @return {?}\n         */\n        (state) => state.entities);\n        /** @type {?} */\n        const selectAll = createSelector(selectIds, selectEntities, (/**\n         * @param {?} ids\n         * @param {?} entities\n         * @return {?}\n         */\n        (ids, entities) => ids.map((/**\n         * @param {?} id\n         * @return {?}\n         */\n        (id) => ((/** @type {?} */ (entities)))[id]))));\n        /** @type {?} */\n        const selectTotal = createSelector(selectIds, (/**\n         * @param {?} ids\n         * @return {?}\n         */\n        ids => ids.length));\n        if (!selectState) {\n            return {\n                selectIds,\n                selectEntities,\n                selectAll,\n                selectTotal,\n            };\n        }\n        return {\n            selectIds: createSelector(selectState, selectIds),\n            selectEntities: createSelector(selectState, selectEntities),\n            selectAll: createSelector(selectState, selectAll),\n            selectTotal: createSelector(selectState, selectTotal),\n        };\n    }\n    return { getSelectors };\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @enum {number} */\nconst DidMutate = {\n    EntitiesOnly: 0,\n    Both: 1,\n    None: 2,\n};\nDidMutate[DidMutate.EntitiesOnly] = 'EntitiesOnly';\nDidMutate[DidMutate.Both] = 'Both';\nDidMutate[DidMutate.None] = 'None';\n/**\n * @template V, R\n * @param {?} mutator\n * @return {?}\n */\nfunction createStateOperator(mutator) {\n    return (/**\n     * @template S\n     * @param {?} arg\n     * @param {?} state\n     * @return {?}\n     */\n    function operation(arg, state) {\n        /** @type {?} */\n        const clonedEntityState = {\n            ids: [...state.ids],\n            entities: Object.assign({}, state.entities),\n        };\n        /** @type {?} */\n        const didMutate = mutator(arg, clonedEntityState);\n        if (didMutate === DidMutate.Both) {\n            return Object.assign({}, state, clonedEntityState);\n        }\n        if (didMutate === DidMutate.EntitiesOnly) {\n            return Object.assign({}, state, { entities: clonedEntityState.entities });\n        }\n        return state;\n    });\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @template T\n * @param {?} entity\n * @param {?} selectId\n * @return {?}\n */\nfunction selectIdValue(entity, selectId) {\n    /** @type {?} */\n    const key = selectId(entity);\n    if (isDevMode() && key === undefined) {\n        console.warn('@ngrx/entity: The entity passed to the `selectId` implementation returned undefined.', 'You should probably provide your own `selectId` implementation.', 'The entity that was passed:', entity, 'The `selectId` implementation:', selectId.toString());\n    }\n    return key;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @template T\n * @param {?} selectId\n * @return {?}\n */\nfunction createUnsortedStateAdapter(selectId) {\n    /**\n     * @param {?} entity\n     * @param {?} state\n     * @return {?}\n     */\n    function addOneMutably(entity, state) {\n        /** @type {?} */\n        const key = selectIdValue(entity, selectId);\n        if (key in state.entities) {\n            return DidMutate.None;\n        }\n        state.ids.push(key);\n        state.entities[key] = entity;\n        return DidMutate.Both;\n    }\n    /**\n     * @param {?} entities\n     * @param {?} state\n     * @return {?}\n     */\n    function addManyMutably(entities, state) {\n        /** @type {?} */\n        let didMutate = false;\n        for (const entity of entities) {\n            didMutate = addOneMutably(entity, state) !== DidMutate.None || didMutate;\n        }\n        return didMutate ? DidMutate.Both : DidMutate.None;\n    }\n    /**\n     * @param {?} entities\n     * @param {?} state\n     * @return {?}\n     */\n    function addAllMutably(entities, state) {\n        state.ids = [];\n        state.entities = {};\n        addManyMutably(entities, state);\n        return DidMutate.Both;\n    }\n    /**\n     * @param {?} key\n     * @param {?} state\n     * @return {?}\n     */\n    function removeOneMutably(key, state) {\n        return removeManyMutably([key], state);\n    }\n    /**\n     * @param {?} keysOrPredicate\n     * @param {?} state\n     * @return {?}\n     */\n    function removeManyMutably(keysOrPredicate, state) {\n        /** @type {?} */\n        const keys = keysOrPredicate instanceof Array\n            ? keysOrPredicate\n            : state.ids.filter((/**\n             * @param {?} key\n             * @return {?}\n             */\n            (key) => keysOrPredicate(state.entities[key])));\n        /** @type {?} */\n        const didMutate = keys\n            .filter((/**\n         * @param {?} key\n         * @return {?}\n         */\n        (key) => key in state.entities))\n            .map((/**\n         * @param {?} key\n         * @return {?}\n         */\n        (key) => delete state.entities[key])).length > 0;\n        if (didMutate) {\n            state.ids = state.ids.filter((/**\n             * @param {?} id\n             * @return {?}\n             */\n            (id) => id in state.entities));\n        }\n        return didMutate ? DidMutate.Both : DidMutate.None;\n    }\n    /**\n     * @template S\n     * @param {?} state\n     * @return {?}\n     */\n    function removeAll(state) {\n        return Object.assign({}, state, {\n            ids: [],\n            entities: {},\n        });\n    }\n    /**\n     * @param {?} keys\n     * @param {?} update\n     * @param {?} state\n     * @return {?}\n     */\n    function takeNewKey(keys, update, state) {\n        /** @type {?} */\n        const original = state.entities[update.id];\n        /** @type {?} */\n        const updated = Object.assign({}, original, update.changes);\n        /** @type {?} */\n        const newKey = selectIdValue(updated, selectId);\n        /** @type {?} */\n        const hasNewKey = newKey !== update.id;\n        if (hasNewKey) {\n            keys[update.id] = newKey;\n            delete state.entities[update.id];\n        }\n        state.entities[newKey] = updated;\n        return hasNewKey;\n    }\n    /**\n     * @param {?} update\n     * @param {?} state\n     * @return {?}\n     */\n    function updateOneMutably(update, state) {\n        return updateManyMutably([update], state);\n    }\n    /**\n     * @param {?} updates\n     * @param {?} state\n     * @return {?}\n     */\n    function updateManyMutably(updates, state) {\n        /** @type {?} */\n        const newKeys = {};\n        updates = updates.filter((/**\n         * @param {?} update\n         * @return {?}\n         */\n        update => update.id in state.entities));\n        /** @type {?} */\n        const didMutateEntities = updates.length > 0;\n        if (didMutateEntities) {\n            /** @type {?} */\n            const didMutateIds = updates.filter((/**\n             * @param {?} update\n             * @return {?}\n             */\n            update => takeNewKey(newKeys, update, state))).length > 0;\n            if (didMutateIds) {\n                state.ids = state.ids.map((/**\n                 * @param {?} id\n                 * @return {?}\n                 */\n                (id) => newKeys[id] || id));\n                return DidMutate.Both;\n            }\n            else {\n                return DidMutate.EntitiesOnly;\n            }\n        }\n        return DidMutate.None;\n    }\n    /**\n     * @param {?} map\n     * @param {?} state\n     * @return {?}\n     */\n    function mapMutably(map, state) {\n        /** @type {?} */\n        const changes = state.ids.reduce((/**\n         * @param {?} changes\n         * @param {?} id\n         * @return {?}\n         */\n        (changes, id) => {\n            /** @type {?} */\n            const change = map(state.entities[id]);\n            if (change !== state.entities[id]) {\n                changes.push({ id, changes: change });\n            }\n            return changes;\n        }), []);\n        /** @type {?} */\n        const updates = changes.filter((/**\n         * @param {?} __0\n         * @return {?}\n         */\n        ({ id }) => id in state.entities));\n        return updateManyMutably(updates, state);\n    }\n    /**\n     * @param {?} entity\n     * @param {?} state\n     * @return {?}\n     */\n    function upsertOneMutably(entity, state) {\n        return upsertManyMutably([entity], state);\n    }\n    /**\n     * @param {?} entities\n     * @param {?} state\n     * @return {?}\n     */\n    function upsertManyMutably(entities, state) {\n        /** @type {?} */\n        const added = [];\n        /** @type {?} */\n        const updated = [];\n        for (const entity of entities) {\n            /** @type {?} */\n            const id = selectIdValue(entity, selectId);\n            if (id in state.entities) {\n                updated.push({ id, changes: entity });\n            }\n            else {\n                added.push(entity);\n            }\n        }\n        /** @type {?} */\n        const didMutateByUpdated = updateManyMutably(updated, state);\n        /** @type {?} */\n        const didMutateByAdded = addManyMutably(added, state);\n        switch (true) {\n            case didMutateByAdded === DidMutate.None &&\n                didMutateByUpdated === DidMutate.None:\n                return DidMutate.None;\n            case didMutateByAdded === DidMutate.Both ||\n                didMutateByUpdated === DidMutate.Both:\n                return DidMutate.Both;\n            default:\n                return DidMutate.EntitiesOnly;\n        }\n    }\n    return {\n        removeAll,\n        addOne: createStateOperator(addOneMutably),\n        addMany: createStateOperator(addManyMutably),\n        addAll: createStateOperator(addAllMutably),\n        updateOne: createStateOperator(updateOneMutably),\n        updateMany: createStateOperator(updateManyMutably),\n        upsertOne: createStateOperator(upsertOneMutably),\n        upsertMany: createStateOperator(upsertManyMutably),\n        removeOne: createStateOperator(removeOneMutably),\n        removeMany: createStateOperator(removeManyMutably),\n        map: createStateOperator(mapMutably),\n    };\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @template T\n * @param {?} selectId\n * @param {?} sort\n * @return {?}\n */\nfunction createSortedStateAdapter(selectId, sort) {\n    const { removeOne, removeMany, removeAll } = createUnsortedStateAdapter(selectId);\n    /**\n     * @param {?} entity\n     * @param {?} state\n     * @return {?}\n     */\n    function addOneMutably(entity, state) {\n        return addManyMutably([entity], state);\n    }\n    /**\n     * @param {?} newModels\n     * @param {?} state\n     * @return {?}\n     */\n    function addManyMutably(newModels, state) {\n        /** @type {?} */\n        const models = newModels.filter((/**\n         * @param {?} model\n         * @return {?}\n         */\n        model => !(selectIdValue(model, selectId) in state.entities)));\n        if (models.length === 0) {\n            return DidMutate.None;\n        }\n        else {\n            merge(models, state);\n            return DidMutate.Both;\n        }\n    }\n    /**\n     * @param {?} models\n     * @param {?} state\n     * @return {?}\n     */\n    function addAllMutably(models, state) {\n        state.entities = {};\n        state.ids = [];\n        addManyMutably(models, state);\n        return DidMutate.Both;\n    }\n    /**\n     * @param {?} update\n     * @param {?} state\n     * @return {?}\n     */\n    function updateOneMutably(update, state) {\n        return updateManyMutably([update], state);\n    }\n    /**\n     * @param {?} models\n     * @param {?} update\n     * @param {?} state\n     * @return {?}\n     */\n    function takeUpdatedModel(models, update, state) {\n        if (!(update.id in state.entities)) {\n            return false;\n        }\n        /** @type {?} */\n        const original = state.entities[update.id];\n        /** @type {?} */\n        const updated = Object.assign({}, original, update.changes);\n        /** @type {?} */\n        const newKey = selectIdValue(updated, selectId);\n        delete state.entities[update.id];\n        models.push(updated);\n        return newKey !== update.id;\n    }\n    /**\n     * @param {?} updates\n     * @param {?} state\n     * @return {?}\n     */\n    function updateManyMutably(updates, state) {\n        /** @type {?} */\n        const models = [];\n        /** @type {?} */\n        const didMutateIds = updates.filter((/**\n         * @param {?} update\n         * @return {?}\n         */\n        update => takeUpdatedModel(models, update, state))).length >\n            0;\n        if (models.length === 0) {\n            return DidMutate.None;\n        }\n        else {\n            /** @type {?} */\n            const originalIds = state.ids;\n            /** @type {?} */\n            const updatedIndexes = [];\n            state.ids = state.ids.filter((/**\n             * @param {?} id\n             * @param {?} index\n             * @return {?}\n             */\n            (id, index) => {\n                if (id in state.entities) {\n                    return true;\n                }\n                else {\n                    updatedIndexes.push(index);\n                    return false;\n                }\n            }));\n            merge(models, state);\n            if (!didMutateIds &&\n                updatedIndexes.every((/**\n                 * @param {?} i\n                 * @return {?}\n                 */\n                (i) => state.ids[i] === originalIds[i]))) {\n                return DidMutate.EntitiesOnly;\n            }\n            else {\n                return DidMutate.Both;\n            }\n        }\n    }\n    /**\n     * @param {?} updatesOrMap\n     * @param {?} state\n     * @return {?}\n     */\n    function mapMutably(updatesOrMap, state) {\n        /** @type {?} */\n        const updates = state.ids.reduce((/**\n         * @param {?} changes\n         * @param {?} id\n         * @return {?}\n         */\n        (changes, id) => {\n            /** @type {?} */\n            const change = updatesOrMap(state.entities[id]);\n            if (change !== state.entities[id]) {\n                changes.push({ id, changes: change });\n            }\n            return changes;\n        }), []);\n        return updateManyMutably(updates, state);\n    }\n    /**\n     * @param {?} entity\n     * @param {?} state\n     * @return {?}\n     */\n    function upsertOneMutably(entity, state) {\n        return upsertManyMutably([entity], state);\n    }\n    /**\n     * @param {?} entities\n     * @param {?} state\n     * @return {?}\n     */\n    function upsertManyMutably(entities, state) {\n        /** @type {?} */\n        const added = [];\n        /** @type {?} */\n        const updated = [];\n        for (const entity of entities) {\n            /** @type {?} */\n            const id = selectIdValue(entity, selectId);\n            if (id in state.entities) {\n                updated.push({ id, changes: entity });\n            }\n            else {\n                added.push(entity);\n            }\n        }\n        /** @type {?} */\n        const didMutateByUpdated = updateManyMutably(updated, state);\n        /** @type {?} */\n        const didMutateByAdded = addManyMutably(added, state);\n        switch (true) {\n            case didMutateByAdded === DidMutate.None &&\n                didMutateByUpdated === DidMutate.None:\n                return DidMutate.None;\n            case didMutateByAdded === DidMutate.Both ||\n                didMutateByUpdated === DidMutate.Both:\n                return DidMutate.Both;\n            default:\n                return DidMutate.EntitiesOnly;\n        }\n    }\n    /**\n     * @param {?} models\n     * @param {?} state\n     * @return {?}\n     */\n    function merge(models, state) {\n        models.sort(sort);\n        /** @type {?} */\n        const ids = [];\n        /** @type {?} */\n        let i = 0;\n        /** @type {?} */\n        let j = 0;\n        while (i < models.length && j < state.ids.length) {\n            /** @type {?} */\n            const model = models[i];\n            /** @type {?} */\n            const modelId = selectIdValue(model, selectId);\n            /** @type {?} */\n            const entityId = state.ids[j];\n            /** @type {?} */\n            const entity = state.entities[entityId];\n            if (sort(model, entity) <= 0) {\n                ids.push(modelId);\n                i++;\n            }\n            else {\n                ids.push(entityId);\n                j++;\n            }\n        }\n        if (i < models.length) {\n            state.ids = ids.concat(models.slice(i).map(selectId));\n        }\n        else {\n            state.ids = ids.concat(state.ids.slice(j));\n        }\n        models.forEach((/**\n         * @param {?} model\n         * @param {?} i\n         * @return {?}\n         */\n        (model, i) => {\n            state.entities[selectId(model)] = model;\n        }));\n    }\n    return {\n        removeOne,\n        removeMany,\n        removeAll,\n        addOne: createStateOperator(addOneMutably),\n        updateOne: createStateOperator(updateOneMutably),\n        upsertOne: createStateOperator(upsertOneMutably),\n        addAll: createStateOperator(addAllMutably),\n        addMany: createStateOperator(addManyMutably),\n        updateMany: createStateOperator(updateManyMutably),\n        upsertMany: createStateOperator(upsertManyMutably),\n        map: createStateOperator(mapMutably),\n    };\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @template T\n * @param {?=} options\n * @return {?}\n */\nfunction createEntityAdapter(options = {}) {\n    const { selectId, sortComparer } = Object.assign({ sortComparer: false, selectId: (/**\n         * @param {?} instance\n         * @return {?}\n         */\n        (instance) => instance.id) }, options);\n    /** @type {?} */\n    const stateFactory = createInitialStateFactory();\n    /** @type {?} */\n    const selectorsFactory = createSelectorsFactory();\n    /** @type {?} */\n    const stateAdapter = sortComparer\n        ? createSortedStateAdapter(selectId, sortComparer)\n        : createUnsortedStateAdapter(selectId);\n    return Object.assign({ selectId,\n        sortComparer }, stateFactory, selectorsFactory, stateAdapter);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @abstract\n * @template T\n */\nclass Dictionary {\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { createEntityAdapter, Dictionary };\n"]}